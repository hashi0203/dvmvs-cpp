#include "config.h"

constexpr int lnin_shifts[2] = {13, 16};
constexpr int lnout_shifts[2] = {17, 16};
int ln_cnt = 0;

constexpr int ln_idx[2] = {0, 512};
constexpr qaint ln_aves[512 + 512] = {-40428, 110185, 1851, 42949, 57662, -53088, -51210, -10377, 45309, 38919, -39410, -36467, 70157, 11769, 27892, -16774, 17899, -19670, 51588, 666, -66234, -19246, -3689, 25121, 25050, 51415, -123089, 4658, 59019, 21275, -21584, -59202, -82247, -64312, 6455, 17686, -3596, 30572, -80325, -32889, 26268, -75570, 71391, -76809, -37424, 15135, -11567, -119853, 14836, 19407, 46021, 21048, -36419, 69010, -44080, -3225, -61436, 686, 121231, -36842, 116501, -66554, -26311, 36061, 12776, -48603, -32219, -33636, -33989, -5637, -20365, -13676, -23501, -3709, 28315, -1200, 26418, 16958, 10232, -30799, 11709, 5435, -18351, 27277, 35293, -1055, -25590, -34943, -36756, -39617, -26810, -21475, -24198, -14828, 6073, 57655, 14057, 42400, 56310, -4597, -23103, 3218, -27104, 43644, 19479, 37185, -23954, 41591, 2180, -56887, -126480, -53411, 74476, -43365, -29407, -33428, 81541, -14708, -42026, -40885, -25363, 10507, 78850, 17044, 52400, -17788, 66596, -66021, 29166, 13068, 52220, -42111, -85719, -6441, -69378, 22254, 9359, -16278, -76560, -58491, -16455, 14279, 1879, -38153, -57188, -37906, -44462, -45895, -55269, -8475, -26576, -106689, 29938, 11347, -3039, -94868, -937, -61948, -23303, 18049, -31076, -13693, 11004, 27653, -93787, -29604, 40038, 14354, 128019, 4846, -44355, 70983, 4463, -40154, 29200, -6873, -59186, 6306, -15418, -3326, 69253, -44141, -23789, 78217, -74224, -39059, -22024, 12242, 68595, -58580, -146469, -64914, 97083, 67833, 16368, -2263, -25854, 45317, -56437, -30310, 19421, -51711, 1569, -11688, 88727, 54481, 5840, -99474, -12148, -57988, -19659, 32040, -32078, 13918, 17669, -30422, 37546, -40421, -6658, -75662, 46081, 38287, 47046, -29593, -20565, 72009, 48335, -8519, -725, 25161, 31430, 6328, 37974, 31203, 36208, -142819, -73568, 11830, 40531, -58877, -41046, -684, 3135, -74920, 5255, -90587, -378, 4762, 18914, -9817, -72230, -46999, 33641, -25212, 18196, -47654, -10435, 81248, -15865, -20812, -55281, -115524, -24664, -9299, -32980, -3369, -93114, -16689, 46080, 126739, 2863, -48217, 35382, -50266, -39393, -33201, -120134, 21624, 23807, 73883, -26285, -42770, 21914, -23200, 40707, 16691, 4112, -16589, 13264, -32721, 54386, -11118, 10390, -80696, -74343, 9171, -36776, 51318, -42395, 5319, -20012, 36536, -11168, -42588, -8943, 23501, -54311, -6010, -33138, 79450, 60050, -20643, 18254, 4603, -25591, 118485, -2474, -8353, -103303, -59741, 39315, -54503, -157879, -8939, 61795, -76407, -28310, -1541, 45179, 60665, -130, 27681, 39550, 19423, -34063, 20233, 110869, -37346, 4073, 7034, -34944, -75620, -14606, 18471, -24760, 1606, -13463, -28747, -11964, 32497, -19224, -115426, 82794, -55193, -33285, -79987, -28430, -2085, -9818, 56450, -3851, -46170, -29382, -51836, 24784, -14472, -26092, 2456, -96042, 16962, 31546, 1052, -10632, 218, -54956, -57706, -43039, 16960, 50524, 88415, -41855, -27495, -68922, 120973, -2599, 38299, -25172, -33113, -11213, -53457, -59535, -8740, -11086, 6999, -26207, -38516, 19252, 103087, -1607, 16355, -4586, 23415, 2583, 24153, -87395, -39991, -12202, 41033, -51278, 76534, 10349, -6761, -50266, -113712, 9001, -20586, 60421, -19675, 2178, 49533, -69903, 99968, 38719, -112315, 41514, 67623, -67941, -66179, -102765, -14822, -63078, 10252, 46046, -100425, -27707, 29915, -9806, -5286, 38447, -45014, 142808, -6627, 46536, -28253, 43629, 39006, 9096, -33025, -24371, 4015, 30546, 51632, -47775, 18115, -1012, -8170, -10944, -2197, 13515, 18732, 90164, 55591, -27394, -25515, -19432, 5472, 69351, 45473, 80736, 38122, 8654, -22895, -67891, -51645, 18705, 2498, -62863, 9578, 53051, -21704, -16868, -42270, -27920, -9187, -87116, 18131, -11611, 67447, -23236, -68957, -15233, -21631, -2704, -37129, -14028, -31359, -73710, -10694, -40953, 36962, 45168, 6562, 11011, -7192, -13676, -75112, -51112, 69772, 102760, -51238, 10795, 27162, 2831, 26854, 14031, 42457, 8427, 9182, 5499, 27013, -956, 36769, -12944, -4166, 16924, 15043, -8492, -3848, -6566, 12210, 23506, 22294, -25117, 30638, 12712, 7, -2445, 8136, -4727, 15079, 2881, 11826, -27761, 16428, 5987, 212, -243, 3971, 20051, -4093, 3738, 11786, 25992, -6838, 38022, -16621, 12355, -1510, 31901, 11908, 16186, -11031, 2177, 18095, -8169, 5470, -3434, 19733, 10785, 22481, 29238, 5949, 17727, -15386, 14829, 4303, 2122, 21387, -6444, 15168, 11070, -727, 15076, 21911, 10165, 6302, -14872, -124, 16649, 14958, -1179, 22885, 17307, 796, 428, 7321, 2884, -23610, 16733, 16010, 14649, 3971, 4158, -16120, 12848, 20087, 3540, 12535, 6066, 17728, 29857, -6427, -305, 19034, -4482, -3776, -2656, -11298, -2220, 13177, -299, 15386, 18786, -6145, 33013, 2625, 18438, 2763, 25345, -18914, -1686, 10994, 89, 1830, 10416, 10287, 15898, -926, -17, 12334, 13424, 13494, 11423, 15592, 17292, 1696, 6416, 2873, -17143, 4153, -413, 17389, 12987, -1926, 5752, 26259, 14551, 28334, 4311, 14399, 480, 15588, -4028, -19209, 14255, 25028, 8341, 10831, 20222, 9621, -16870, 12612, -359, 4795, 6232, 16556, 482, -3109, 20484, 12245, 4532, 22687, 11020, 14980, 19382, 2049, 11587, -1084, 25511, 40018, 17620, 954, 6037, -17946, 2797, -2431, -15869, -12539, 17366, 8116, 6900, 15518, -26295, -9725, 26065, 11172, -8198, 17428, 34, 32603, -22807, 18336, 5090, -36, -5062, 12588, 11818, 12621, 7529, 15262, 2852, -6070, 1569, 11521, 1767, 93, 1258, 266, 2629, 10877, 6336, -8862, 7417, 30437, -3812, 562, 7520, -414, 28625, 4640, 1094, 1687, 35613, 20686, 2809, 12844, 50753, 31296, -11826, 11989, 26841, 6401, 23399, 2151, 21782, 15841, 17796, -1968, 15958, -16164, -23799, 13620, -13488, 21974, -6056, 27943, 32239, 13000, 7848, 24697, 14862, 19283, -17302, 7268, 19944, 15722, 28375, 14050, 4105, 2323, 19961, 19816, 12155, -940, 20787, 8821, -3205, 3315, 11578, 33936, 28497, -1909, -578, -20718, 18117, 10869, 11817, -534, 2169, 34030, 39064, 1128, -71, 16325, 2239, 14040, 28936, 3070, 993, -1, -32, 2521, 2342, -2933, 10038, 9575, 25195, 1441, 5155, 2931, 20061, -506, 10530, 17619, 21740, 7206, -9193, -370, -3434, -1091, 4298, -18052, 13875, -2251, 843, 2392, 22979, 7767, -7522, 13994, 4605, -6618, 1257, 4012, -7659, 26941, 13692, 8985, 1362, -27760, -3729, 3727, 14989, 11707, -9690, 13462, 8637, 7355, 10844, -4741, 4414, 17367, -149, -3556, 15454, 10854, -4531, -25897, 13135, 9594, -1701, 18326, -7542, 8957, -743, -17227, 14343, 10922, -799, 19961, 11694, 20853, 4759, 13254, 2827, 17562, -14365, 95, -29348, 20690, 6404, 24856, 1845, -18498, -798, 14953, 17017, 419, 39817, 6644, -3162, 19229, 1898, 93, 13321, -2556, -937, -1195, 31088, 21339, 31183, -1589, 26808, -701, 21301, 17457, 11118, -22642, 22005, 8912, 15046, 24428, 12405, 8829, 2665, 5090, 11549, -24367, 9927, 37970, 197, 34024, -26350, 19129, -18748, 4357, 40091, 21681, 2881, 24337, 13759, 19006, 8751, -445, 35216, 9801, 3697, 906, 17590, 9807, -4814, -8994, -20302, -2226, 22661, -13928, 26084, 17685, 17810, 12576, 16190, 930, 16109, 2474, 22499, 13499, 16535, 9688, 14591, 8303, 3492, 13121, 14788, 20767, 18688, 12833, 1012, 20021, 48136, -14147, -13470, 11433, 2966, 13485, -2756, 17954, 1563, 41130, 1270, 11645, 28084, -2530, 13538, -15129, 5555, 12188, 24301, 11724, 15105, 16296, 11135, -29397, -11316, 11603, 4211, -16281, -5364, 21530, 13208, -8022, 23711, 13350, 24002, 21266, 13843, 13319, -6579, 6873, 13178, -3021, 18379, 943, -660, 280};
constexpr qaint ln_inv_stds[512 + 512] = {36562, 14192, 15241, 21445, 81339, 29558, 40420, 24250, 36049, 36491, 16388, 47136, 24204, 78471, 71341, 46171, 32617, 42591, 29659, 26171, 21466, 16455, 20054, 48471, 31987, 31016, 19427, 39158, 24134, 15465, 27271, 20939, 13183, 67587, 80381, 37382, 22986, 42283, 63884, 24791, 30061, 43952, 28118, 55634, 76609, 16468, 13542, 30391, 8573, 30031, 60876, 26113, 36309, 38177, 41889, 21336, 25075, 22219, 13337, 31484, 27596, 65660, 32798, 35069, 27203, 12294, 41623, 61372, 81999, 20141, 54689, 41244, 63456, 35941, 13157, 18996, 44207, 22848, 63850, 13556, 38057, 72790, 57604, 37253, 46813, 35312, 30455, 25994, 37104, 68028, 82144, 22886, 18526, 17668, 42424, 34528, 50573, 22097, 50517, 22602, 51652, 24896, 44677, 45680, 32660, 24195, 23147, 22892, 28161, 45715, 39358, 62355, 23201, 33666, 27248, 47247, 32250, 20980, 31478, 65750, 49335, 33850, 25250, 40528, 17347, 57351, 39930, 15563, 47755, 21274, 44978, 63440, 20954, 84528, 17814, 58075, 31783, 22035, 26712, 93545, 18403, 36218, 55004, 25174, 58823, 44619, 74016, 33054, 45204, 27838, 66817, 29024, 18279, 40712, 43473, 24604, 23744, 25978, 45780, 46443, 47588, 24543, 49388, 25693, 58038, 45930, 44707, 54646, 17389, 38663, 35481, 18254, 19218, 58687, 16208, 23423, 12530, 45700, 38351, 39436, 37228, 21406, 23520, 57057, 40831, 48023, 33983, 74402, 28567, 55553, 26000, 18982, 20241, 32706, 32110, 35488, 76596, 24570, 32917, 12787, 36693, 32216, 25840, 60959, 14354, 60095, 83992, 44337, 35716, 25221, 35224, 49245, 31687, 41047, 57586, 48831, 60658, 55864, 42979, 15208, 12948, 24285, 18985, 32046, 41147, 67954, 18581, 38307, 44010, 17097, 22548, 33594, 61157, 21539, 10682, 9370, 16233, 40795, 22917, 23549, 33505, 43264, 20097, 19863, 70550, 29098, 41073, 20848, 19404, 21559, 17259, 14842, 14079, 39050, 61819, 54096, 25328, 19313, 19100, 21489, 26242, 8456, 20936, 19290, 41863, 80490, 52146, 34105, 30703, 26578, 44463, 36582, 24993, 18575, 38675, 35510, 54401, 34989, 30230, 33842, 32956, 50163, 43009, 20957, 62110, 32108, 41416, 38008, 21531, 33765, 51438, 31261, 29277, 53887, 11158, 50499, 47937, 31051, 36687, 41681, 20172, 34977, 21816, 48015, 51189, 36474, 26332, 37645, 32129, 47122, 43169, 43518, 57058, 80523, 98922, 51371, 31353, 36299, 26717, 56787, 21690, 27333, 47689, 79741, 12901, 29943, 53889, 40915, 34755, 31332, 41972, 35862, 24975, 16781, 10472, 52419, 31105, 24492, 33142, 43001, 38465, 69198, 37783, 32305, 29831, 53606, 49380, 26714, 35025, 46935, 64218, 16856, 23712, 14894, 26637, 25075, 29697, 36375, 39389, 67804, 31884, 26471, 53992, 31131, 16767, 30862, 32202, 41637, 40574, 55553, 47901, 24854, 43525, 28305, 29082, 37074, 26910, 24904, 59629, 32952, 25785, 19742, 44463, 24803, 20818, 80096, 19938, 58402, 46801, 37908, 69738, 64840, 42829, 19810, 32636, 32876, 25242, 37420, 17211, 46925, 16143, 67346, 27223, 23679, 20795, 16126, 20023, 64129, 48061, 10923, 31672, 65770, 28201, 45184, 31488, 34789, 27287, 14912, 39854, 34811, 23649, 39600, 24737, 45284, 16637, 31805, 26290, 34459, 24520, 32387, 33021, 23824, 15248, 31425, 40896, 56499, 56692, 39045, 16802, 19713, 47624, 35049, 15874, 14263, 12253, 30884, 41965, 25661, 32912, 30546, 26402, 29120, 41937, 52654, 39578, 73794, 48788, 68845, 30915, 9987, 36141, 21331, 42354, 34361, 49836, 24996, 19834, 36409, 28770, 37340, 28636, 71119, 21684, 31333, 27658, 17453, 60086, 33456, 20062, 38705, 22125, 60969, 30456, 23467, 23608, 33433, 59045, 59810, 37569, 19548, 32662, 56957, 26706, 22759, 54342, 23950, 68117, 27040, 9069, 23923, 40346, 42269, 86748, 34310, 19989, 29610, 51596, 35325, 18054, 29874, 44044, 22135, 52807, 106582, 98845, 40422, 76499, 91538, 72522, 148096, 68412, 49376, 49497, 79227, 96206, 60192, 69529, 203299, 114446, 89483, 41511, 83049, 54358, 39530, 77248, 100939664, 211996, 72614, 46787, 88852, 66198, 37326, 60293, 40425, 40555, 252773, 45515, 222524, 119232, 147298, 51312, 251665, 42363, 53654, 63835, 51663, 39935, 65469, 47887, 37091, 82358, 113810, 165780, 55883, 101921, 54286, 199257, 113775, 180348, 93657, 40794, 96234, 83742, 53023, 89310, 348666, 300452, 175527, 139667, 79428, 84613, 66851, 85348, 110735, 154369, 97236, 47736, 67448, 138809, 47157, 68309, 37641, 109509, 52298, 178037, 53113, 255067, 68525, 49979, 107471, 113046, 78605, 477899, 181021, 39104, 88110, 82986, 47609, 63676, 40505, 58001, 71894, 68259, 43617, 70452, 63373, 123776, 315979, 70015, 81899, 72925, 85900, 89514, 68849, 45548, 69307, 40627, 63321, 110973, 60186, 62761, 83326, 66935, 80905, 78095, 183576, 38416, 63998, 125098528, 90522, 147034, 78216, 87780, 47597, 85796, 169453, 38412, 61340, 51336, 63137, 65988, 107284, 167091, 59116, 242580, 82035, 98603, 51693, 288849, 39242, 2870044, 77519, 61658, 50692, 81419, 124848, 106012, 88985, 64943, 65165, 57757, 86225, 137267, 40985, 319791, 54107, 73563, 123179, 92450, 47918, 72358, 43882, 76724, 74322, 36923, 141077, 53990, 67588, 42412, 48898, 58617, 66685, 218174, 50568, 105723, 135758, 198926, 88262, 96375, 232881, 52970, 104822, 55185, 49081, 99926, 79830, 51744, 97434, 67315, 51216, 58361, 66054, 57960, 252746, 52390, 86427, 75178, 83470, 58705, 113517, 138713, 256141, 104580, 81187, 52651, 19582340, 70908, 76474, 443681, 142733, 64992, 49740, 63309, 43520, 70326, 66322, 175036, 46235, 40586, 110749, 64295, 73457, 59913, 67417, 684614, 37507, 52277, 132184, 50341, 46436, 43635, 40712, 53541, 104153, 98571, 112784, 109076, 144717, 90490, 50432, 79499, 50989, 200633, 53553, 60526, 42147, 67438, 102239, 71735, 39957, 123341, 121929, 207404, 41977, 90888, 38260, 51728, 109655, 100547, 65043, 83439, 142717, 80826, 71566, 46888, 35931, 280474, 90850, 38557, 57715, 41320, 69802, 1893270, 117842, 105068, 35092, 73035, 66981, 65996, 47498, 42990, 661725, 23867328, 79902, 772657, 127550, 44446, 70778, 161117, 67929, 128337, 602219, 65100, 180719, 94080, 87631, 42714, 1273818, 100250, 80046, 101859, 120793, 81284, 107973, 95586, 218238, 59595, 67119, 126457, 66426, 39690, 77608, 91088, 66175, 2001594, 61201, 98407, 69571, 242928, 91234, 42875, 237595, 1198269, 60846, 48325, 121220, 88282, 109527, 41542, 55395, 373954, 69822, 97341, 59719, 47048, 86008, 87470, 60740, 98035, 71640, 420174, 51310, 66613, 62209, 83468, 85127, 191709, 53631, 47451, 54368, 68848, 80209, 83503, 39862, 67793, 53951, 42767, 81670, 2393143, 101881, 85368, 119740, 61754, 54248, 51965, 38783, 159501, 20794372, 69288, 64407, 42845, 44598, 79237, 66016, 510191, 49374, 38710, 2159742, 50983, 327978, 248899, 105868, 97653, 11762307, 89713, 61065, 1547466, 149051, 104497, 105696, 47508, 711767, 38710, 46992, 54631, 94188, 38136, 55651, 37097, 103291, 87401, 39985, 65915, 52029, 65025, 41128, 91015, 56929, 78322, 46466, 59208, 49200, 54759, 100134, 217421, 160755, 54230, 94625, 39965, 63213, 94578, 41728, 180576, 67749, 45407, 38079, 232289, 2607274, 67562, 57804, 71045, 133413, 67200, 166052, 99186, 50460, 150772, 99840, 51679, 55927, 105692, 66182, 97216, 44434, 101225, 85702, 164878, 172623, 61151, 108155, 102205, 82150, 113826, 94411, 69801, 90025, 151820, 75461, 71109, 174595, 58580, 41341, 56094, 92004, 69036, 38519, 71000, 44762, 155343, 100046, 115506, 517554, 39001, 80117, 368781, 91822, 116637, 79536, 111232, 67703, 93724, 56872, 212915, 98622, 71925, 183074, 64271, 46895, 41566, 133768, 93055, 39302, 44260, 74761, 96918, 66578, 53638, 55308, 139144, 66250, 42243, 2132668, 69635, 65990};

void layer_norm(qaint* x, const int channels, const int height, const int width) {
    constexpr float eps = 1e-5;
    const int n1 = height * width;
    const qaint* ln_ave = ln_aves + ln_idx[ln_cnt];
    const qaint* ln_inv_std = ln_inv_stds + ln_idx[ln_cnt];
    for (int i = 0; i < channels; i++) {
        float e = 0;
        float v = 0;
        for (int idx = 0; idx < height * width; idx++) {
            e += x[i * (height * width) + idx];
            v += ((qmint) x[i * (height * width) + idx]) * x[i * (height * width) + idx];
        }
        e /= n1;
        v /= n1;
        v -= e * e;
        if (i == 0) {
            print2(ln_ave[i], e);
            print2(((qmint) ln_inv_std[i]) / (float) (1 << lnin_shifts[ln_cnt]), 1.0 / sqrt(v + eps) * (1 << lnout_shifts[ln_cnt]));
        }
        for (int idx = 0; idx < height * width; idx++)
            // x[i * (height * width) + idx] = (x[i * (height * width) + idx] - ln_ave[i]) * ((qmint) ln_inv_std[i]) / (float) (1 << lnin_shifts[ln_cnt]);
            x[i * (height * width) + idx] = (x[i * (height * width) + idx] - e) / sqrt(v + eps) * (1 << lnout_shifts[ln_cnt]);
    }
    ln_cnt = 1 - ln_cnt;
}


void add_layer(const qaint* x, qaint* y, const int layer_size, const string param_path) {
    const int xshift = ain1_shifts[add_cnt];
    const int yshift = ain2_shifts[add_cnt];
    const int outshift = aout_shifts[add_cnt];
    print_neg_shift(param_path, "xshift", xshift);
    print_neg_shift(param_path, "yshift", yshift);
    print_neg_shift(param_path, "outshift", outshift);
    add_cnt++;
    const int mshift = max(max(xshift, yshift), outshift);
    for (int idx = 0; idx < layer_size; idx++)
        y[idx] = (((qmint) y[idx] << (mshift - yshift)) + (((qmint) x[idx] << (mshift - xshift)))) >> (mshift - outshift);
}


void interpolate(const qaint* input, qaint* output, const string mode,
                const int channels, const int in_height, const int in_width,
                const int out_height, const int out_width) {

    // mode    fy  fx
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 16 16
    // bilinear 0.33333 0.4
    // bilinear 0.42857 0.45455
    // bilinear 0.42857 0.45455
    // bilinear 0.46667 0.47826
    // bilinear 0.46667 0.47826
    // bilinear 0.48387 0.48936
    // bilinear 0.48387 0.48936
    // bilinear 0.49206 0.49474
    // bilinear 0.49206 0.49474

    if (mode == "nearest") {
        const float fy = (float) in_height / out_height;
        const float fx = (float) in_width / out_width;
        for (int j = 0; j < out_height; j++) for (int k = 0; k < out_width; k++) {
            const int y = j * fy;
            const int x = k * fx;
            for (int i = 0; i < channels; i++) {
                const int input_idx = (i * in_height + y) * in_width + x;
                const int output_idx = (i * out_height + j) * out_width + k;
                output[output_idx] = input[input_idx];
            }
        }
    } else if (mode == "bilinear") {
        if (in_height < out_height) {
            const float fy = (float) (in_height - 1) / (out_height - 1);
            const float fx = (float) (in_width - 1) / (out_width - 1);
            for (int j = 0; j < out_height; j++) for (int k = 0; k < out_width; k++) {
                const float y = j * fy;
                const float x = k * fx;
                const int y_int = floor(y);
                const int x_int = floor(x);
                const int ys[2] = {y_int, y_int + 1};
                const int xs[2] = {x_int, x_int + 1};
                const float dys[2] = {y - ys[0], ys[1] - y};
                const float dxs[2] = {x - xs[0], xs[1] - x};
                for (int i = 0; i < channels; i++) {
                    const int output_idx = (i * out_height + j) * out_width + k;
                    output[output_idx] = 0;
                    for (int yi = 0; yi < 2; yi++) for (int xi = 0; xi < 2; xi++) {
                        const int input_idx = (i * in_height + ys[yi]) * in_width + xs[xi];
                        output[output_idx] += dys[1-yi] * dxs[1-xi] * input[input_idx];
                    }
                }
            }
        } else {
            cout << "in_height is larger than out_height" << "\n";
            exit(1);
        }
    } else {
        cout << "The 'mode' option in interpolation should be 'nearest' or 'bilinear,' but it is " << mode << "\n";
        exit(1);
    }

    const int xshift = oin_shifts[other_cnt];
    const int yshift = oout_shifts[other_cnt];
    other_cnt++;
    if (yshift != xshift) print3("xshift and yshift differ in interpolation:", xshift, yshift);
    // print_neg_shift(param_path, "xshift", xshift);
    // print_neg_shift(param_path, "yshift", yshift);
    // print_neg_shift(param_path, "yshift - xshift", yshift - xshift);
}


void grid_sample(const qaint* image, const float* warping, float* warped_image,
                 const int channels, const int height, const int width) {

    for (int idx = 0; idx < height * width; idx++) {
        const float x = (warping[idx * 2 + 0] + 1) * (width - 1) / 2.0;
        const float y = (warping[idx * 2 + 1] + 1) * (height - 1) / 2.0;
        const int y_int = floor(y);
        const int x_int = floor(x);
        const int ys[2] = {y_int, y_int + 1};
        const int xs[2] = {x_int, x_int + 1};
        const float dys[2] = {y - ys[0], ys[1] - y};
        const float dxs[2] = {x - xs[0], xs[1] - x};
        for (int i = 0; i < channels; i++) {
            warped_image[i * (height * width) + idx] = 0;
            for (int yi = 0; yi < 2; yi++) for (int xi = 0; xi < 2; xi++) {
                const float val = (ys[yi] < 0 || height-1 < ys[yi] || xs[xi] < 0 || width-1 < xs[xi]) ? 0 : image[(i * height + ys[yi]) * width + xs[xi]];
                warped_image[i * (height * width) + idx] += dys[1-yi] * dxs[1-xi] * val;
            }
        }
    }
}
