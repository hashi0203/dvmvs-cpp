#include "config.h"

constexpr int lnshifts[2] = {17, 16};
int ln_cnt = 0;

constexpr int ln_idx[2] = {0, 512};
constexpr qaint ln_aves[512 + 512] = {-80855, 220370, 3701, 85897, 115325, -106177, -102420, -20755, 90619, 77839, -78821, -72935, 140313, 23538, 55785, -33549, 35798, -39340, 103177, 1332, -132467, -38492, -7377, 50243, 50101, 102830, -246179, 9315, 118039, 42550, -43168, -118404, -164494, -128623, 12910, 35371, -7192, 61143, -160649, -65778, 52537, -151139, 142783, -153619, -74847, 30270, -23134, -239706, 29673, 38813, 92041, 42097, -72837, 138021, -88160, -6450, -122872, 1372, 242462, -73683, 233002, -133109, -52622, 72122, 25551, -97206, -64439, -67272, -67977, -11273, -40731, -27352, -47002, -7417, 56631, -2400, 52836, 33917, 20464, -61599, 23417, 10870, -36702, 54554, 70586, -2110, -51180, -69887, -73513, -79234, -53621, -42951, -48396, -29655, 12146, 115309, 28113, 84799, 112620, -9193, -46206, 6437, -54208, 87288, 38957, 74370, -47907, 83181, 4361, -113775, -252960, -106822, 148952, -86731, -58813, -66856, 163081, -29416, -84051, -81771, -50727, 21015, 157700, 34087, 104799, -35577, 133192, -132042, 58331, 26136, 104440, -84222, -171438, -12882, -138756, 44508, 18717, -32557, -153120, -116982, -32910, 28557, 3758, -76306, -114377, -75811, -88924, -91789, -110538, -16951, -53152, -213378, 59875, 22693, -6078, -189737, -1873, -123895, -46606, 36099, -62152, -27386, 22007, 55307, -187574, -59208, 80076, 28708, 256038, 9692, -88710, 141965, 8926, -80309, 58400, -13747, -118372, 12612, -30835, -6653, 138507, -88282, -47579, 156434, -148448, -78118, -44047, 24484, 137190, -117160, -292937, -129828, 194167, 135665, 32736, -4526, -51707, 90635, -112873, -60620, 38842, -103422, 3138, -23376, 177453, 108963, 11680, -198949, -24296, -115976, -39318, 64081, -64155, 27836, 35337, -60843, 75091, -80842, -13315, -151323, 92162, 76574, 94092, -59186, -41129, 144018, 96670, -17038, -1450, 50322, 62860, 12656, 75948, 62406, 72416, -285637, -147137, 23660, 81062, -117754, -82091, -1367, 6269, -149839, 10510, -181174, -757, 9524, 37828, -19635, -144460, -93998, 67283, -50423, 36392, -95308, -20870, 162497, -31729, -41624, -110561, -231048, -49327, -18597, -65960, -6739, -186228, -33378, 92161, 253479, 5727, -96433, 70765, -100532, -78787, -66402, -240267, 43248, 47613, 147767, -52571, -85540, 43828, -46401, 81413, 33381, 8224, -33179, 26528, -65442, 108771, -22237, 20780, -161392, -148686, 18342, -73551, 102637, -84789, 10638, -40024, 73072, -22336, -85176, -17886, 47002, -108622, -12020, -66276, 158900, 120101, -41286, 36507, 9207, -51183, 236971, -4948, -16705, -206606, -119483, 78630, -109006, -315758, -17877, 123590, -152813, -56619, -3082, 90358, 121331, -260, 55362, 79099, 38847, -68126, 40465, 221739, -74692, 8146, 14069, -69889, -151240, -29212, 36942, -49520, 3211, -26926, -57494, -23929, 64994, -38448, -230853, 165588, -110386, -66569, -159974, -56860, -4170, -19636, 112900, -7702, -92339, -58765, -103672, 49568, -28943, -52183, 4913, -192085, 33925, 63092, 2104, -21264, 436, -109913, -115412, -86079, 33919, 101049, 176830, -83711, -54990, -137843, 241946, -5198, 76598, -50344, -66225, -22426, -106914, -119071, -17479, -22171, 13998, -52414, -77031, 38504, 206173, -3214, 32711, -9172, 46831, 5166, 48306, -174789, -79982, -24404, 82067, -102556, 153068, 20697, -13523, -100533, -227425, 18003, -41172, 120842, -39350, 4355, 99066, -139807, 199937, 77439, -224630, 83029, 135247, -135882, -132359, -205530, -29643, -126156, 20504, 92091, -200851, -55414, 59830, -19612, -10572, 76894, -90027, 285616, -13254, 93071, -56506, 87258, 78011, 18191, -66049, -48742, 8029, 61093, 103264, -95549, 36230, -2024, -16339, -21888, -4394, 27030, 37465, 180329, 111182, -54789, -51030, -38863, 10944, 138702, 90946, 161472, 76244, 17308, -45790, -135783, -103290, 37409, 4996, -125726, 19156, 106102, -43408, -33737, -84541, -55840, -18375, -174232, 36262, -23221, 134894, -46473, -137913, -30467, -43262, -5409, -74258, -28056, -62719, -147420, -21389, -81907, 73924, 90336, 13125, 22021, -14383, -27352, -150224, -102224, 139543, 205519, -102476, 21590, 54325, 2831, 26854, 14031, 42457, 8427, 9182, 5499, 27013, -956, 36769, -12944, -4166, 16924, 15043, -8492, -3848, -6566, 12210, 23506, 22294, -25117, 30638, 12712, 7, -2445, 8136, -4727, 15079, 2881, 11826, -27761, 16428, 5987, 212, -243, 3971, 20051, -4093, 3738, 11786, 25992, -6838, 38022, -16621, 12355, -1510, 31901, 11908, 16186, -11031, 2177, 18095, -8169, 5470, -3434, 19733, 10785, 22481, 29238, 5949, 17727, -15386, 14829, 4303, 2122, 21387, -6444, 15168, 11070, -727, 15076, 21911, 10165, 6302, -14872, -124, 16649, 14958, -1179, 22885, 17307, 796, 428, 7321, 2884, -23610, 16733, 16010, 14649, 3971, 4158, -16120, 12848, 20087, 3540, 12535, 6066, 17728, 29857, -6427, -305, 19034, -4482, -3776, -2656, -11298, -2220, 13177, -299, 15386, 18786, -6145, 33013, 2625, 18438, 2763, 25345, -18914, -1686, 10994, 89, 1830, 10416, 10287, 15898, -926, -17, 12334, 13424, 13494, 11423, 15592, 17292, 1696, 6416, 2873, -17143, 4153, -413, 17389, 12987, -1926, 5752, 26259, 14551, 28334, 4311, 14399, 480, 15588, -4028, -19209, 14255, 25028, 8341, 10831, 20222, 9621, -16870, 12612, -359, 4795, 6232, 16556, 482, -3109, 20484, 12245, 4532, 22687, 11020, 14980, 19382, 2049, 11587, -1084, 25511, 40018, 17620, 954, 6037, -17946, 2797, -2431, -15869, -12539, 17366, 8116, 6900, 15518, -26295, -9725, 26065, 11172, -8198, 17428, 34, 32603, -22807, 18336, 5090, -36, -5062, 12588, 11818, 12621, 7529, 15262, 2852, -6070, 1569, 11521, 1767, 93, 1258, 266, 2629, 10877, 6336, -8862, 7417, 30437, -3812, 562, 7520, -414, 28625, 4640, 1094, 1687, 35613, 20686, 2809, 12844, 50753, 31296, -11826, 11989, 26841, 6401, 23399, 2151, 21782, 15841, 17796, -1968, 15958, -16164, -23799, 13620, -13488, 21974, -6056, 27943, 32239, 13000, 7848, 24697, 14862, 19283, -17302, 7268, 19944, 15722, 28375, 14050, 4105, 2323, 19961, 19816, 12155, -940, 20787, 8821, -3205, 3315, 11578, 33936, 28497, -1909, -578, -20718, 18117, 10869, 11817, -534, 2169, 34030, 39064, 1128, -71, 16325, 2239, 14040, 28936, 3070, 993, -1, -32, 2521, 2342, -2933, 10038, 9575, 25195, 1441, 5155, 2931, 20061, -506, 10530, 17619, 21740, 7206, -9193, -370, -3434, -1091, 4298, -18052, 13875, -2251, 843, 2392, 22979, 7767, -7522, 13994, 4605, -6618, 1257, 4012, -7659, 26941, 13692, 8985, 1362, -27760, -3729, 3727, 14989, 11707, -9690, 13462, 8637, 7355, 10844, -4741, 4414, 17367, -149, -3556, 15454, 10854, -4531, -25897, 13135, 9594, -1701, 18326, -7542, 8957, -743, -17227, 14343, 10922, -799, 19961, 11694, 20853, 4759, 13254, 2827, 17562, -14365, 95, -29348, 20690, 6404, 24856, 1845, -18498, -798, 14953, 17017, 419, 39817, 6644, -3162, 19229, 1898, 93, 13321, -2556, -937, -1195, 31088, 21339, 31183, -1589, 26808, -701, 21301, 17457, 11118, -22642, 22005, 8912, 15046, 24428, 12405, 8829, 2665, 5090, 11549, -24367, 9927, 37970, 197, 34024, -26350, 19129, -18748, 4357, 40091, 21681, 2881, 24337, 13759, 19006, 8751, -445, 35216, 9801, 3697, 906, 17590, 9807, -4814, -8994, -20302, -2226, 22661, -13928, 26084, 17685, 17810, 12576, 16190, 930, 16109, 2474, 22499, 13499, 16535, 9688, 14591, 8303, 3492, 13121, 14788, 20767, 18688, 12833, 1012, 20021, 48136, -14147, -13470, 11433, 2966, 13485, -2756, 17954, 1563, 41130, 1270, 11645, 28084, -2530, 13538, -15129, 5555, 12188, 24301, 11724, 15105, 16296, 11135, -29397, -11316, 11603, 4211, -16281, -5364, 21530, 13208, -8022, 23711, 13350, 24002, 21266, 13843, 13319, -6579, 6873, 13178, -3021, 18379, 943, -660, 280};
constexpr qaint ln_stds[512 + 512] = {8653, 5391, 5587, 6627, 12907, 7780, 9098, 7047, 8592, 8645, 5793, 9825, 7041, 12677, 12087, 9724, 8173, 9340, 7794, 7321, 6630, 5805, 6409, 9963, 8094, 7970, 6308, 8955, 7030, 5628, 7473, 6549, 5196, 11765, 12830, 8750, 6861, 9306, 11438, 7125, 7846, 9488, 7588, 10674, 12526, 5808, 5266, 7889, 4190, 7842, 11166, 7313, 8623, 8842, 9262, 6610, 7166, 6746, 5226, 8030, 7518, 11596, 8196, 8475, 7464, 5018, 9233, 11211, 12959, 6423, 10583, 9191, 11400, 8579, 5191, 6237, 9515, 6841, 11435, 5269, 8828, 12210, 10862, 8735, 9791, 8504, 7898, 7296, 8717, 11803, 12970, 6846, 6160, 6015, 9321, 8409, 10177, 6727, 10172, 6804, 10285, 7141, 9566, 9672, 8178, 7039, 6885, 6847, 7594, 9676, 8978, 11301, 6893, 8303, 7470, 9837, 8127, 6555, 8029, 11604, 10052, 8326, 7191, 9110, 5960, 10838, 9043, 5646, 9889, 6601, 9598, 11398, 6551, 13157, 6040, 10906, 8068, 6718, 7396, 13841, 6139, 8612, 10614, 7180, 10976, 9559, 12312, 8228, 9622, 7551, 11698, 7710, 6119, 9131, 9436, 7099, 6973, 7294, 9683, 9753, 9872, 7090, 10057, 7254, 10902, 9699, 9569, 10579, 5968, 8898, 8524, 6114, 6274, 10963, 5761, 6926, 5066, 9674, 8862, 8987, 8732, 6621, 6940, 10810, 9144, 9917, 8343, 12344, 7649, 10666, 7297, 6235, 6438, 8184, 8109, 8525, 12525, 7094, 8211, 5117, 8669, 8123, 7275, 11173, 5422, 11094, 13115, 9529, 8553, 7187, 8493, 10043, 8056, 9169, 10860, 10000, 11146, 10696, 9382, 5581, 5150, 7052, 6235, 8101, 9180, 11797, 6169, 8857, 9494, 5917, 6795, 8295, 11192, 6642, 4677, 4381, 5766, 9140, 6851, 6945, 8284, 9413, 6416, 6378, 12020, 7720, 9172, 6534, 6304, 6645, 5945, 5513, 5370, 8943, 11252, 10526, 7202, 6289, 6254, 6634, 7331, 4161, 6548, 6285, 9259, 12839, 10334, 8358, 7930, 7378, 9543, 8656, 7154, 6168, 8900, 8528, 10555, 8465, 7868, 8325, 8215, 10136, 9385, 6551, 11278, 8109, 9210, 8823, 6640, 8316, 10264, 8001, 7743, 10505, 4780, 10170, 9908, 7974, 8668, 9239, 6427, 8464, 6684, 9916, 10239, 8643, 7344, 8781, 8112, 9824, 9403, 9441, 10810, 12842, 14234, 10257, 8013, 8622, 7397, 10784, 6665, 7482, 9883, 12779, 5140, 7831, 10505, 9154, 8437, 8010, 9271, 8570, 7152, 5862, 4631, 10361, 7981, 7082, 8239, 9384, 8876, 11905, 8797, 8134, 7816, 10478, 10056, 7397, 8469, 9804, 11468, 5875, 6969, 5523, 7386, 7166, 7799, 8631, 8982, 11784, 8081, 7363, 10515, 7985, 5860, 7950, 8121, 9234, 9116, 10666, 9905, 7135, 9441, 7614, 7717, 8714, 7424, 7142, 11051, 8215, 7267, 6359, 9543, 7127, 6530, 12808, 6390, 10937, 9790, 8811, 11951, 11524, 9366, 6370, 8176, 8205, 7190, 8754, 5937, 9803, 5750, 11744, 7467, 6964, 6526, 5747, 6404, 11460, 9921, 4730, 8054, 11606, 7600, 9620, 8030, 8441, 7475, 5526, 9034, 8444, 6959, 9006, 7118, 9630, 5837, 8071, 7338, 8401, 7086, 8144, 8224, 6985, 5588, 8022, 9152, 10757, 10775, 8942, 5866, 6354, 9876, 8472, 5702, 5405, 5009, 7953, 9271, 7249, 8210, 7909, 7353, 7723, 9267, 10384, 9003, 12293, 9996, 11874, 7957, 4523, 8603, 6610, 9313, 8389, 10103, 7155, 6373, 8635, 7676, 8745, 7658, 12069, 6664, 8011, 7526, 5979, 11093, 8278, 6410, 8903, 6731, 11174, 7898, 6933, 6953, 8275, 10997, 11068, 8772, 6327, 8179, 10800, 7396, 6827, 10550, 7004, 11811, 7442, 4310, 7000, 9090, 9304, 13329, 8383, 6398, 7787, 10280, 8506, 6081, 7822, 9497, 6733, 58828, 83576, 80485, 51469, 70806, 77453, 68941, 98517, 66959, 56885, 56955, 72057, 79404, 62807, 67503, 115427, 86604, 76579, 52158, 73775, 59686, 50898, 71151, 2572000, 117870, 68984, 55373, 76309, 65866, 49459, 62860, 51471, 51554, 128708, 54616, 120761, 88397, 98251, 57990, 128425, 52691, 59298, 64680, 58187, 51158, 65502, 56021, 49303, 73467, 86364, 104233, 60517, 81728, 59647, 114274, 86350, 108717, 78345, 51706, 79415, 74082, 58948, 76505, 151163, 140323, 107253, 95673, 72148, 74466, 66190, 74789, 85189, 100582, 79828, 55933, 66485, 95378, 55592, 66908, 49668, 84716, 58544, 108018, 58999, 129291, 67014, 57231, 83924, 86073, 71774, 176973, 108919, 50623, 75989, 73747, 55858, 64599, 51522, 61654, 68641, 66883, 53465, 67949, 64445, 90066, 143903, 67739, 73262, 69132, 75030, 76593, 67172, 54635, 67395, 51599, 64419, 85280, 62804, 64134, 73897, 66232, 72816, 71540, 109685, 50176, 64762, 2863295, 77022, 98163, 71596, 75847, 55851, 74985, 105382, 50173, 63403, 58003, 64325, 65762, 83851, 104645, 62243, 126086, 73323, 80387, 58205, 137586, 50713, 433695, 71276, 63568, 57638, 73047, 90454, 83352, 76366, 65239, 65350, 61524, 75172, 94847, 51826, 144768, 59548, 69434, 89848, 77838, 56039, 68862, 53627, 70910, 69791, 49191, 96154, 59484, 66554, 52721, 56609, 61980, 66108, 119575, 57568, 83238, 94324, 114179, 76055, 79474, 123540, 58919, 82883, 60138, 56715, 80924, 72331, 58233, 79909, 66420, 57935, 61844, 65795, 61632, 128701, 58595, 75260, 70191, 73961, 62026, 86252, 95345, 129563, 82788, 72943, 58741, 1132850, 68169, 70794, 170520, 96717, 65263, 57094, 64413, 53405, 67889, 65928, 107104, 55046, 51574, 85194, 64913, 69384, 62661, 66470, 211818, 49579, 58532, 93074, 57438, 55165, 53476, 51654, 59235, 82618, 80374, 85973, 84548, 97387, 77009, 57490, 72181, 57807, 114668, 59242, 62981, 52556, 66480, 81855, 68565, 51172, 89907, 89391, 116586, 52450, 77178, 50074, 58224, 84772, 81175, 65289, 73948, 96711, 72781, 68484, 55433, 48526, 135577, 77162, 50268, 61501, 52038, 67636, 352246, 87880, 82980, 47956, 69184, 66254, 65766, 55793, 53079, 208247, 1250668, 72364, 225026, 91428, 53970, 68106, 102757, 66722, 91710, 198663, 65318, 108828, 78522, 75782, 52909, 288931, 81056, 72428, 81703, 88973, 72987, 84120, 79148, 119593, 62495, 66323, 91036, 65980, 51001, 71317, 77263, 65855, 362183, 63331, 80307, 67524, 126177, 77325, 53008, 124784, 280232, 63147, 56276, 89131, 76063, 84723, 52178, 60252, 156548, 67645, 79871, 62560, 55528, 75078, 75713, 63092, 80155, 68520, 165941, 57988, 66072, 63851, 73960, 74692, 112088, 59285, 55765, 59691, 67172, 72502, 73976, 51112, 66655, 59462, 52941, 73159, 396027, 81712, 74798, 88585, 63617, 59626, 58357, 50415, 102240, 1167382, 67386, 64969, 52989, 54063, 72061, 65776, 182855, 56884, 50368, 376219, 57803, 146610, 127718, 83296, 79999, 877983, 76677, 63261, 318457, 98834, 82755, 83228, 55798, 215978, 50367, 55495, 59836, 78566, 49993, 60392, 49307, 82276, 75683, 51191, 65725, 58393, 65280, 51917, 77232, 61081, 71644, 55183, 62292, 56783, 59906, 81008, 119369, 102641, 59616, 78748, 51178, 64364, 78729, 52294, 108785, 66634, 54551, 49955, 123383, 413365, 66541, 61549, 68235, 93506, 66363, 104319, 80624, 57506, 99403, 80889, 58197, 60541, 83226, 65858, 79819, 53963, 81449, 74944, 103949, 106363, 63306, 84191, 81842, 73374, 86370, 78660, 67635, 76811, 99748, 70324, 68266, 106969, 61961, 52051, 60631, 77650, 67263, 50243, 68214, 54162, 100899, 80973, 87005, 184169, 50557, 72461, 155462, 77574, 87430, 72197, 85380, 66610, 78373, 61051, 118125, 80395, 68656, 109535, 64900, 55437, 52193, 93630, 78092, 50751, 53857, 69997, 79697, 66055, 59289, 60205, 95493, 65892, 52616, 373854, 67554, 65763};

void layer_norm(qaint* x, const int channels, const int height, const int width) {

    constexpr float eps = 1e-5;
    const int n1 = height * width;
    const qaint* ln_ave = ln_aves + ln_idx[ln_cnt];
    const qaint* ln_std = ln_stds + ln_idx[ln_cnt];
    for (int i = 0; i < channels; i++) {
        float e = 0;
        float v = 0;
        for (int idx = 0; idx < height * width; idx++) {
            e += x[i * (height * width) + idx];
            v += ((qmint) x[i * (height * width) + idx]) * x[i * (height * width) + idx];
        }
        e /= n1;
        v /= n1;
        v -= e * e;
        for (int idx = 0; idx < height * width; idx++)
            // x[i * (height * width) + idx] = (x[i * (height * width) + idx] - ln_ave[i]) * ((qmint) ln_std[i]) / (float) (1 << lnshifts[ln_cnt]);
            x[i * (height * width) + idx] = (x[i * (height * width) + idx] - e) / sqrt(v + eps) * (1 << lnshifts[ln_cnt]);
    }
    ln_cnt = 1 - ln_cnt;
}


void add_layer(const qaint* x, qaint* y, const int layer_size, const string param_path) {
    const int xshift = ain1_shifts[add_cnt];
    const int yshift = ain2_shifts[add_cnt];
    const int outshift = aout_shifts[add_cnt];
    print_neg_shift(param_path, "xshift", xshift);
    print_neg_shift(param_path, "yshift", yshift);
    print_neg_shift(param_path, "outshift", outshift);
    add_cnt++;
    const int mshift = max(max(xshift, yshift), outshift);
    for (int idx = 0; idx < layer_size; idx++)
        y[idx] = (((qmint) y[idx] << (mshift - yshift)) + (((qmint) x[idx] << (mshift - xshift)))) >> (mshift - outshift);
}


void interpolate(const qaint* input, qaint* output, const string mode,
                const int channels, const int in_height, const int in_width,
                const int out_height, const int out_width) {

    // mode    fy  fx
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 0.5 0.5
    // nearest 16 16
    // bilinear 0.33333 0.4
    // bilinear 0.42857 0.45455
    // bilinear 0.42857 0.45455
    // bilinear 0.46667 0.47826
    // bilinear 0.46667 0.47826
    // bilinear 0.48387 0.48936
    // bilinear 0.48387 0.48936
    // bilinear 0.49206 0.49474
    // bilinear 0.49206 0.49474

    if (mode == "nearest") {
        const float fy = (float) in_height / out_height;
        const float fx = (float) in_width / out_width;
        for (int j = 0; j < out_height; j++) for (int k = 0; k < out_width; k++) {
            const int y = j * fy;
            const int x = k * fx;
            for (int i = 0; i < channels; i++) {
                const int input_idx = (i * in_height + y) * in_width + x;
                const int output_idx = (i * out_height + j) * out_width + k;
                output[output_idx] = input[input_idx];
            }
        }
    } else if (mode == "bilinear") {
        if (in_height < out_height) {
            const float fy = (float) (in_height - 1) / (out_height - 1);
            const float fx = (float) (in_width - 1) / (out_width - 1);
            for (int j = 0; j < out_height; j++) for (int k = 0; k < out_width; k++) {
                const float y = j * fy;
                const float x = k * fx;
                const int y_int = floor(y);
                const int x_int = floor(x);
                const int ys[2] = {y_int, y_int + 1};
                const int xs[2] = {x_int, x_int + 1};
                const float dys[2] = {y - ys[0], ys[1] - y};
                const float dxs[2] = {x - xs[0], xs[1] - x};
                for (int i = 0; i < channels; i++) {
                    const int output_idx = (i * out_height + j) * out_width + k;
                    output[output_idx] = 0;
                    for (int yi = 0; yi < 2; yi++) for (int xi = 0; xi < 2; xi++) {
                        const int input_idx = (i * in_height + ys[yi]) * in_width + xs[xi];
                        output[output_idx] += dys[1-yi] * dxs[1-xi] * input[input_idx];
                    }
                }
            }
        } else {
            cout << "in_height is larger than out_height" << "\n";
            exit(1);
        }
    } else {
        cout << "The 'mode' option in interpolation should be 'nearest' or 'bilinear,' but it is " << mode << "\n";
        exit(1);
    }

    const int xshift = oin_shifts[other_cnt];
    const int yshift = oout_shifts[other_cnt];
    other_cnt++;
    if (yshift != xshift) print3("xshift and yshift differ in interpolation:", xshift, yshift);
    // print_neg_shift(param_path, "xshift", xshift);
    // print_neg_shift(param_path, "yshift", yshift);
    // print_neg_shift(param_path, "yshift - xshift", yshift - xshift);
}


void grid_sample(const qaint* image, const float* warping, float* warped_image,
                 const int channels, const int height, const int width) {

    for (int idx = 0; idx < height * width; idx++) {
        const float x = (warping[idx * 2 + 0] + 1) * (width - 1) / 2.0;
        const float y = (warping[idx * 2 + 1] + 1) * (height - 1) / 2.0;
        const int y_int = floor(y);
        const int x_int = floor(x);
        const int ys[2] = {y_int, y_int + 1};
        const int xs[2] = {x_int, x_int + 1};
        const float dys[2] = {y - ys[0], ys[1] - y};
        const float dxs[2] = {x - xs[0], xs[1] - x};
        for (int i = 0; i < channels; i++) {
            warped_image[i * (height * width) + idx] = 0;
            for (int yi = 0; yi < 2; yi++) for (int xi = 0; xi < 2; xi++) {
                const float val = (ys[yi] < 0 || height-1 < ys[yi] || xs[xi] < 0 || width-1 < xs[xi]) ? 0 : image[(i * height + ys[yi]) * width + xs[xi]];
                warped_image[i * (height * width) + idx] += dys[1-yi] * dxs[1-xi] * val;
            }
        }
    }
}
